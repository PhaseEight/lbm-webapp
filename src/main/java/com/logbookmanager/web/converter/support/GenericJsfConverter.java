/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-jsf2-spring-conversation:src/main/java/converter/com.logbookmanager.domain.model.support/GenericJsfConverter.p.vm.java
 */
package com.logbookmanager.web.converter.support;

import static org.apache.commons.lang3.StringUtils.removeEnd;
import static org.apache.commons.lang3.StringUtils.removeStart;

import java.io.Serializable;

import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;

import org.springframework.core.convert.support.DefaultConversionService;

import com.logbookmanager.domain.support.Entity;
import com.logbookmanager.domain.support.EntitySupport;
import com.logbookmanager.service.LBMService;

/**
 * Base JSF converter for JPA entities. Handle cases when primary key is not yet
 * set or when it is set manually.
 */
public class GenericJsfConverter<T extends EntitySupport<T, ID>, ID extends Serializable>
		implements Converter {
	public static final String NULL_OBJECT_AS_STRING = "__null__";
	public static final String NEW_OBJECT_AS_STRING = "__new__";
	public static final String PK_PREFIX = "__pk:";
	public static final String PK_SUFFIX = "__";

	private Class<T> type;
	private Class<ID> pkType;

	protected DefaultConversionService conversionService = new DefaultConversionService();
	protected LBMService<T, ID> entityService;

	protected GenericJsfConverter(LBMService<T, ID> entityService,
			Class<T> type, Class<ID> pkType) {
		this.entityService = entityService;
		this.type = type;
		this.pkType = pkType;
	}

	public Class<T> getType() {
		return type;
	}

	@Override
	public Object getAsObject(FacesContext context, UIComponent component,
			String value) throws ConverterException {
		if (value == null || NULL_OBJECT_AS_STRING.equals(value)) {
			return null;
		} else if (component instanceof UIInput
				&& NEW_OBJECT_AS_STRING.equals(value)) {
			return ((UIInput) component).getValue();
		}

		T entity = null;
		if (value.startsWith(PK_PREFIX) && value.endsWith(PK_SUFFIX)) {
			String pkAsString = removeStart(value, PK_PREFIX);
			pkAsString = removeEnd(pkAsString, PK_SUFFIX);
			entity = entityService.findById(toPk(pkAsString));
		}
		if (entity == null && component instanceof UIInput) {
			// id is manually set and entity is not yet persisted
			return ((UIInput) component).getValue();
		}

		return entity;
	}

	/**
	 * Converts the passed value to a PK instance. Entity having a composite PK
	 * must override it.
	 */
	public ID toPk(String value) {
		return conversionService.convert(value, pkType);
	}

	@Override
	@SuppressWarnings("unchecked")
	public String getAsString(FacesContext context, UIComponent component,
			Object object) {
		if (object == null || !Entity.class.isAssignableFrom(object.getClass())) {
			return NULL_OBJECT_AS_STRING;
		}

		Entity<T, ID> io = (Entity<T, ID>) object;
		if (io.isIdSet()) {
			return PK_PREFIX + io.getId().toString() + PK_SUFFIX;
		} else if (component instanceof UIInput) {
			return NEW_OBJECT_AS_STRING;
		} else {
			return NULL_OBJECT_AS_STRING;
		}
	}
}