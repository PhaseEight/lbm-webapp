package com.logbookmanager.domain.model.person;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

import com.logbookmanager.domain.model.logbook.Logbook;
import com.logbookmanager.domain.model.organisation.Qualification;
import com.logbookmanager.domain.model.security.User;
import com.logbookmanager.domain.support.EntitySupport;
import com.logbookmanager.domain.support.PersonalDetails;

/**
 * Person generated by hbm2java
 */
public class Person extends EntitySupport<Person, Long> implements
		java.io.Serializable {

	// Fields
	private static final long serialVersionUID = 912839123L;

	// member entities
	private User secUser;

	private List<PersonQualification> personQualifications = new ArrayList<PersonQualification>();

	private List<PersonLogbook> personLogbooks = new ArrayList<PersonLogbook>();
	
	private PersonalDetails personalDetails;

	// Constructors
	/** default constructor required by Hibernate */
	Person() {
	}

	/**
	 *
	 */
	public List<PersonQualification> getPersonQualifications() {
		return this.personQualifications;
	}

	public void setPersonQualifications(
			List<PersonQualification> personQualifications) {
		this.personQualifications = personQualifications;
	}

	/**
	 *
	 */
	public List<PersonLogbook> getPersonLogbooks() {
		return this.personLogbooks;
	}

	public void setPersonLogbooks(List<PersonLogbook> personLogbooks) {
		this.personLogbooks = personLogbooks;
	}

	public void addLogbook(Logbook logbook) {
		PersonLogbook personLogbook = new PersonLogbook();
		personLogbook.setLogbook(logbook);
		personLogbook.setPerson(this);
		if (!this.personLogbooks.contains(personLogbook)) {
			this.personLogbooks.add(personLogbook);
		}
	}

	public PersonQualification addQualification(Qualification qualification) {
		PersonQualification pq = new PersonQualification();
		pq.setPerson(this);
		pq.setQualification(qualification);
		if (!personQualifications.contains(pq)) {
			personQualifications.add(pq);
		} else {
			return personQualifications.get(personQualifications.indexOf(pq));
		}
		return null;
	}

	public User getSecUser() {
		return secUser;
	}

	public void setSecUser(User secUser) {
		this.secUser = secUser;
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString() {
		return new ToStringBuilder(this)
				.append("\nqualifications", this.personQualifications)
				.append("\nid", this.id)
				.append("\npersonLogbooks", this.personLogbooks)
				.append("\nversion", this.version)
				.append("\nuser", this.secUser).toString();
	}

	public PersonalDetails getPersonalDetails() {
		return personalDetails;
	}

	public void setPersonalDetails(PersonalDetails personalDetails) {
		this.personalDetails = personalDetails;
	}

	/**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object) {
		if (!(object instanceof Person)) {
			return false;
		}
		Person rhs = (Person) object;
		return new EqualsBuilder().append(this.secUser, rhs.secUser).isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode() {
		return new HashCodeBuilder(1471500779, -1755482979)
				.append(this.secUser).toHashCode();
	}
}